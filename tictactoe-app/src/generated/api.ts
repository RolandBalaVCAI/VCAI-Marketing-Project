/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Marketing Dashboard API
 * Comprehensive API for managing marketing campaigns, analytics, and reporting
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  Campaign,
  CampaignList,
  GetCampaignsParams,
  PostCampaignsBody,
  PostCampaignsIdNotes201,
  PostCampaignsIdNotesBody
} from './types.ts';




  export const getMarketingDashboardAPI = () => {
/**
 * Retrieve a paginated list of marketing campaigns with optional filtering and sorting
 * @summary List all campaigns
 */
const getCampaigns = <TData = AxiosResponse<CampaignList>>(
    params?: GetCampaignsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/campaigns`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Create a new marketing campaign with the provided details
 * @summary Create a new campaign
 */
const postCampaigns = <TData = AxiosResponse<Campaign>>(
    postCampaignsBody: PostCampaignsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/campaigns`,
      postCampaignsBody,options
    );
  }

/**
 * Retrieve detailed information about a specific campaign
 * @summary Get campaign by ID
 */
const getCampaignsId = <TData = AxiosResponse<Campaign>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/campaigns/${id}`,options
    );
  }

/**
 * Update an existing campaign with new information
 * @summary Update campaign
 */
const putCampaignsId = <TData = AxiosResponse<Campaign>>(
    id: string,
    campaign: Campaign, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/campaigns/${id}`,
      campaign,options
    );
  }

/**
 * Delete a campaign and all associated data
 * @summary Delete campaign
 */
const deleteCampaignsId = <TData = AxiosResponse<null>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/campaigns/${id}`,options
    ).then((res) => {if (res.data === "") res.data = null; return res as TData;});
  }

/**
 * Add a new note to the specified campaign
 * @summary Add note to campaign
 */
const postCampaignsIdNotes = <TData = AxiosResponse<PostCampaignsIdNotes201>>(
    id: string,
    postCampaignsIdNotesBody: PostCampaignsIdNotesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/campaigns/${id}/notes`,
      postCampaignsIdNotesBody,options
    );
  }

return {getCampaigns,postCampaigns,getCampaignsId,putCampaignsId,deleteCampaignsId,postCampaignsIdNotes}};
export type GetCampaignsResult = AxiosResponse<CampaignList>
export type PostCampaignsResult = AxiosResponse<Campaign>
export type GetCampaignsIdResult = AxiosResponse<Campaign>
export type PutCampaignsIdResult = AxiosResponse<Campaign>
export type DeleteCampaignsIdResult = AxiosResponse<null>
export type PostCampaignsIdNotesResult = AxiosResponse<PostCampaignsIdNotes201>
